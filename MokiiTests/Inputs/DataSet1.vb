'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Mono Runtime Version: 1.1.4322.2032
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Explicit On
Option Strict On

Imports System
Imports System.Collections
Imports System.ComponentModel
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml

'
'This source code was auto-generated by MonoXSD
'

Public Class DataSet1
    Inherits System.Data.DataSet
    Implements System.Xml.Serialization.IXmlSerializable
    
    Public Delegate Sub authorsRowChangedEventHandler(ByVal o As Object, ByVal e As authorsRowChangedEventArgs)
    
    Public Delegate Sub statesRowChangedEventHandler(ByVal o As Object, ByVal e As statesRowChangedEventArgs)
    
    Private __tableauthors As authorsDataTable
    
    Private __tablestates As statesDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitializeClass()
        Dim handler As System.ComponentModel.CollectionChangeEventHandler = New System.ComponentModel.CollectionChangeEventHandler(AddressOf Me.SchemaChanged)
        AddHandler Me.Tables.CollectionChanged, handler
        AddHandler Me.Relations.CollectionChanged, handler
    End Sub
    
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal ctx As System.Runtime.Serialization.StreamingContext)
        MyBase.New
        'TODO: implement
        Throw New System.NotImplementedException()
    End Sub
    
    Public Overridable ReadOnly Property authors As authorsDataTable
        Get
            Return Me.__tableauthors
        End Get
    End Property
    
    Public Overridable ReadOnly Property states As statesDataTable
        Get
            Return Me.__tablestates
        End Get
    End Property
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim [set] As DataSet1 = CType(MyBase.Clone(), DataSet1)
        [set].InitializeFields()
        Return [set]
    End Function
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim sw As System.IO.StringWriter = New System.IO.StringWriter()
        Me.WriteXmlSchema(sw)
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(New System.IO.StringReader(sw.ToString())), Nothing)
    End Function
    
    Function System_Xml_Serialization_IXmlSerializable_GetSchema() As System.Xml.Schema.XmlSchema 'Implements System.Xml.Serialization.IXmlSerializable.GetSchema
        Return Me.GetSchemaSerializable()
    End Function
    
    Friend Sub InitializeClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.__tableauthors = New authorsDataTable()
        Me.Tables.Add(Me.__tableauthors)
        Me.__tablestates = New statesDataTable()
        Me.Tables.Add(Me.__tablestates)
        Dim uc As System.Data.UniqueConstraint
        uc = New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.__tableauthors.Columns("au_id")}, true)
        Me.__tableauthors.Constraints.Add(uc)
    End Sub
    
    Friend Sub InitializeFields()
        Me.__tableauthors.InitializeFields()
        Me.__tablestates.InitializeFields()
    End Sub
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitializeFields()
        End If
    End Sub
    
    Public Class authorsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private __columnau_id As System.Data.DataColumn
        
        Private __columnau_lname As System.Data.DataColumn
        
        Private __columnau_fname As System.Data.DataColumn
        
        Private __columnphone As System.Data.DataColumn
        
        Private __columnaddress As System.Data.DataColumn
        
        Private __columncity As System.Data.DataColumn
        
        Private __columnstate As System.Data.DataColumn
        
        Private __columnzip As System.Data.DataColumn
        
        Private __columncontract As System.Data.DataColumn
        
        Friend Sub New()
            MyBase.New("authors")
            Me.InitializeClass()
            Me.InitializeFields()
        End Sub
        
        Friend Sub New(ByVal tableauthors As System.Data.DataTable)
            MyBase.New(tableauthors.TableName)
            'TODO: implement
            Throw New System.NotImplementedException()
        End Sub
        
        Public Overridable ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Overridable Default ReadOnly Property Item(ByVal i As Integer) As authorsRow
            Get
                Return CType(Me.Rows(i), authorsRow)
            End Get
        End Property
        
        Friend ReadOnly Property au_idColumn As System.Data.DataColumn
            Get
                Return Me.__columnau_id
            End Get
        End Property
        
        Friend ReadOnly Property au_lnameColumn As System.Data.DataColumn
            Get
                Return Me.__columnau_lname
            End Get
        End Property
        
        Friend ReadOnly Property au_fnameColumn As System.Data.DataColumn
            Get
                Return Me.__columnau_fname
            End Get
        End Property
        
        Friend ReadOnly Property phoneColumn As System.Data.DataColumn
            Get
                Return Me.__columnphone
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As System.Data.DataColumn
            Get
                Return Me.__columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As System.Data.DataColumn
            Get
                Return Me.__columncity
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As System.Data.DataColumn
            Get
                Return Me.__columnstate
            End Get
        End Property
        
        Friend ReadOnly Property zipColumn As System.Data.DataColumn
            Get
                Return Me.__columnzip
            End Get
        End Property
        
        Friend ReadOnly Property contractColumn As System.Data.DataColumn
            Get
                Return Me.__columncontract
            End Get
        End Property
        
        Public Event authorsRowChanging As authorsRowChangedEventHandler
        
        Public Event authorsRowChanged As authorsRowChangedEventHandler
        
        Public Event authorsRowDeleting As authorsRowChangedEventHandler
        
        Public Event authorsRowDeleted As authorsRowChangedEventHandler
        
        Private Sub InitializeClass()
            Me.Columns.Add(New System.Data.DataColumn("au_id", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("au_lname", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("au_fname", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("phone", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("address", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("city", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("state", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("zip", GetType(String)))
            Me.Columns.Add(New System.Data.DataColumn("contract", GetType(Boolean)))
        End Sub
        
        Friend Sub InitializeFields()
            Me.__columnau_id = Me.Columns("au_id")
            Me.__columnau_id.AllowDBNull = false
            Me.__columnau_lname = Me.Columns("au_lname")
            Me.__columnau_lname.AllowDBNull = false
            Me.__columnau_fname = Me.Columns("au_fname")
            Me.__columnau_fname.AllowDBNull = false
            Me.__columnphone = Me.Columns("phone")
            Me.__columnphone.AllowDBNull = false
            Me.__columnaddress = Me.Columns("address")
            Me.__columncity = Me.Columns("city")
            Me.__columnstate = Me.Columns("state")
            Me.__columnzip = Me.Columns("zip")
            Me.__columncontract = Me.Columns("contract")
            Me.__columncontract.AllowDBNull = false
        End Sub
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator()
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim t As authorsDataTable = CType(MyBase.Clone(), authorsDataTable)
            t.InitializeFields()
            Return t
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New authorsDataTable()
        End Function
        
        Public Overloads Overridable Sub AddauthorsRow(ByVal row As authorsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Overridable Function AddauthorsRow(ByVal au_id As String, ByVal au_lname As String, ByVal au_fname As String, ByVal phone As String, ByVal address As String, ByVal city As String, ByVal state As String, ByVal zip As String, ByVal contract As Boolean) As authorsRow
            Dim row As authorsRow = Me.NewauthorsRow()
            row("au_id") = au_id
            row("au_lname") = au_lname
            row("au_fname") = au_fname
            row("phone") = phone
            row("address") = address
            row("city") = city
            row("state") = state
            row("zip") = zip
            row("contract") = contract
            Me.Rows.Add(row)
            Return row
        End Function
        
        Public Overridable Function NewauthorsRow() As authorsRow
            Return CType(Me.NewRow(), authorsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New authorsRow(builder)
        End Function
        
        Public Overridable Sub RemoveauthorsRow(ByVal row As authorsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(authorsRow)
        End Function
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.authorsRowChangingEvent) Is Nothing) Then
                RaiseEvent authorsRowChanging(Me, New authorsRowChangedEventArgs(CType(e.Row, authorsRow), e.Action))
                
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.authorsRowChangedEvent) Is Nothing) Then
                RaiseEvent authorsRowChanged(Me, New authorsRowChangedEventArgs(CType(e.Row, authorsRow), e.Action))
                
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.authorsRowDeletingEvent) Is Nothing) Then
                RaiseEvent authorsRowDeleting(Me, New authorsRowChangedEventArgs(CType(e.Row, authorsRow), e.Action))
                
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.authorsRowDeletedEvent) Is Nothing) Then
                RaiseEvent authorsRowDeleted(Me, New authorsRowChangedEventArgs(CType(e.Row, authorsRow), e.Action))
                
            End If
        End Sub
    End Class
    
    Public Class authorsRow
        Inherits System.Data.DataRow
        
        Private tableauthors As authorsDataTable
        
        Friend Sub New(ByVal builder As System.Data.DataRowBuilder)
            MyBase.New(builder)
            Me.tableauthors = CType(Me.Table, authorsDataTable)
        End Sub
        
        Public Overridable Property au_id As String
            Get
                Dim ret As Object = Me(Me.tableauthors.au_idColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.au_idColumn) = Value
            End Set
        End Property
        
        Public Overridable Property au_lname As String
            Get
                Dim ret As Object = Me(Me.tableauthors.au_lnameColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.au_lnameColumn) = Value
            End Set
        End Property
        
        Public Overridable Property au_fname As String
            Get
                Dim ret As Object = Me(Me.tableauthors.au_fnameColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.au_fnameColumn) = Value
            End Set
        End Property
        
        Public Overridable Property phone As String
            Get
                Dim ret As Object = Me(Me.tableauthors.phoneColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.phoneColumn) = Value
            End Set
        End Property
        
        Public Overridable Property address As String
            Get
                Dim ret As Object = Me(Me.tableauthors.addressColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.addressColumn) = Value
            End Set
        End Property
        
        Public Overridable Property city As String
            Get
                Dim ret As Object = Me(Me.tableauthors.cityColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.cityColumn) = Value
            End Set
        End Property
        
        Public Overridable Property state As String
            Get
                Dim ret As Object = Me(Me.tableauthors.stateColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.stateColumn) = Value
            End Set
        End Property
        
        Public Overridable Property zip As String
            Get
                Dim ret As Object = Me(Me.tableauthors.zipColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tableauthors.zipColumn) = Value
            End Set
        End Property
        
        Public Overridable Property contract As Boolean
            Get
                Dim ret As Object = Me(Me.tableauthors.contractColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, Boolean)
                End If
            End Get
            Set
                Me(Me.tableauthors.contractColumn) = Value
            End Set
        End Property
        
        Public Overridable Function Isau_idNull() As Boolean
            Return Me.IsNull(Me.tableauthors.au_idColumn)
        End Function
        
        Public Overridable Sub Setau_idNull()
            Me(Me.tableauthors.au_idColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function Isau_lnameNull() As Boolean
            Return Me.IsNull(Me.tableauthors.au_lnameColumn)
        End Function
        
        Public Overridable Sub Setau_lnameNull()
            Me(Me.tableauthors.au_lnameColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function Isau_fnameNull() As Boolean
            Return Me.IsNull(Me.tableauthors.au_fnameColumn)
        End Function
        
        Public Overridable Sub Setau_fnameNull()
            Me(Me.tableauthors.au_fnameColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function IsphoneNull() As Boolean
            Return Me.IsNull(Me.tableauthors.phoneColumn)
        End Function
        
        Public Overridable Sub SetphoneNull()
            Me(Me.tableauthors.phoneColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function IsaddressNull() As Boolean
            Return Me.IsNull(Me.tableauthors.addressColumn)
        End Function
        
        Public Overridable Sub SetaddressNull()
            Me(Me.tableauthors.addressColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function IscityNull() As Boolean
            Return Me.IsNull(Me.tableauthors.cityColumn)
        End Function
        
        Public Overridable Sub SetcityNull()
            Me(Me.tableauthors.cityColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tableauthors.stateColumn)
        End Function
        
        Public Overridable Sub SetstateNull()
            Me(Me.tableauthors.stateColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function IszipNull() As Boolean
            Return Me.IsNull(Me.tableauthors.zipColumn)
        End Function
        
        Public Overridable Sub SetzipNull()
            Me(Me.tableauthors.zipColumn) = System.DBNull.Value
        End Sub
        
        Public Overridable Function IscontractNull() As Boolean
            Return Me.IsNull(Me.tableauthors.contractColumn)
        End Function
        
        Public Overridable Sub SetcontractNull()
            Me(Me.tableauthors.contractColumn) = System.DBNull.Value
        End Sub
    End Class
    
    Public Class authorsRowChangedEventArgs
        Inherits System.EventArgs
        
        Private eventRow As authorsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal r As authorsRow, ByVal a As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = r
            Me.eventAction = a
        End Sub
        
        Public ReadOnly Property Row As authorsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class statesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private __columnstate As System.Data.DataColumn
        
        Friend Sub New()
            MyBase.New("states")
            Me.InitializeClass()
            Me.InitializeFields()
        End Sub
        
        Friend Sub New(ByVal tablestates As System.Data.DataTable)
            MyBase.New(tablestates.TableName)
            'TODO: implement
            Throw New System.NotImplementedException()
        End Sub
        
        Public Overridable ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Overridable Default ReadOnly Property Item(ByVal i As Integer) As statesRow
            Get
                Return CType(Me.Rows(i), statesRow)
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As System.Data.DataColumn
            Get
                Return Me.__columnstate
            End Get
        End Property
        
        Public Event statesRowChanging As statesRowChangedEventHandler
        
        Public Event statesRowChanged As statesRowChangedEventHandler
        
        Public Event statesRowDeleting As statesRowChangedEventHandler
        
        Public Event statesRowDeleted As statesRowChangedEventHandler
        
        Private Sub InitializeClass()
            Me.Columns.Add(New System.Data.DataColumn("state", GetType(String)))
        End Sub
        
        Friend Sub InitializeFields()
            Me.__columnstate = Me.Columns("state")
        End Sub
        
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator()
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim t As statesDataTable = CType(MyBase.Clone(), statesDataTable)
            t.InitializeFields()
            Return t
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New statesDataTable()
        End Function
        
        Public Overloads Overridable Sub AddstatesRow(ByVal row As statesRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Overridable Function AddstatesRow(ByVal state As String) As statesRow
            Dim row As statesRow = Me.NewstatesRow()
            row("state") = state
            Me.Rows.Add(row)
            Return row
        End Function
        
        Public Overridable Function NewstatesRow() As statesRow
            Return CType(Me.NewRow(), statesRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New statesRow(builder)
        End Function
        
        Public Overridable Sub RemovestatesRow(ByVal row As statesRow)
            Me.Rows.Remove(row)
        End Sub
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(statesRow)
        End Function
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.statesRowChangingEvent) Is Nothing) Then
                RaiseEvent statesRowChanging(Me, New statesRowChangedEventArgs(CType(e.Row, statesRow), e.Action))
                
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.statesRowChangedEvent) Is Nothing) Then
                RaiseEvent statesRowChanged(Me, New statesRowChangedEventArgs(CType(e.Row, statesRow), e.Action))
                
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.statesRowDeletingEvent) Is Nothing) Then
                RaiseEvent statesRowDeleting(Me, New statesRowChangedEventArgs(CType(e.Row, statesRow), e.Action))
                
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.statesRowDeletedEvent) Is Nothing) Then
                RaiseEvent statesRowDeleted(Me, New statesRowChangedEventArgs(CType(e.Row, statesRow), e.Action))
                
            End If
        End Sub
    End Class
    
    Public Class statesRow
        Inherits System.Data.DataRow
        
        Private tablestates As statesDataTable
        
        Friend Sub New(ByVal builder As System.Data.DataRowBuilder)
            MyBase.New(builder)
            Me.tablestates = CType(Me.Table, statesDataTable)
        End Sub
        
        Public Overridable Property state As String
            Get
                Dim ret As Object = Me(Me.tablestates.stateColumn)
                If (ret Is System.DBNull.Value) Then
                    Throw New System.Data.StrongTypingException("Cannot get strong typed value since it is DB null.", Nothing)
                Else
                    Return CType(ret, String)
                End If
            End Get
            Set
                Me(Me.tablestates.stateColumn) = Value
            End Set
        End Property
        
        Public Overridable Function IsstateNull() As Boolean
            Return Me.IsNull(Me.tablestates.stateColumn)
        End Function
        
        Public Overridable Sub SetstateNull()
            Me(Me.tablestates.stateColumn) = System.DBNull.Value
        End Sub
    End Class
    
    Public Class statesRowChangedEventArgs
        Inherits System.EventArgs
        
        Private eventRow As statesRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal r As statesRow, ByVal a As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = r
            Me.eventAction = a
        End Sub
        
        Public ReadOnly Property Row As statesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
